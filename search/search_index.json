{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PayPal Native Checkout Welcome to the Express Checkout Native SDK Developer Docs! The Paypal Checkout Native SDK provides an in-context mobile experience by supporting a lightweight client-side integration, keeping your existing server-side integration intact. The SDK maintains feature parity with PayPal web checkout while offering a faster mobile-optimized experience. Include a native checkout experience that keeps the user inside your merchant application with some simple integration steps. Getting Started To get started please follow instructions on obtaining a Merchant ID here","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#paypal-native-checkout","text":"","title":"PayPal Native Checkout"},{"location":"#_2","text":"","title":""},{"location":"#welcome-to-the-express-checkout-native-sdk-developer-docs","text":"The Paypal Checkout Native SDK provides an in-context mobile experience by supporting a lightweight client-side integration, keeping your existing server-side integration intact. The SDK maintains feature parity with PayPal web checkout while offering a faster mobile-optimized experience. Include a native checkout experience that keeps the user inside your merchant application with some simple integration steps.","title":"Welcome to the Express Checkout Native SDK Developer Docs!"},{"location":"#getting-started","text":"To get started please follow instructions on obtaining a Merchant ID here","title":"Getting Started"},{"location":"faq/","text":"Frequently Asked Questions Where do I get started? First be sure to obtain a merchant ID here For iOS start here For Android start here Where do I sign up for a PayPal developer account? You may sign up for a developer account here A developer account is required for use with any of PayPal's various SDK's, including the Native Checkout SDK. Is there a Project Roadmap I can follow? You may subscribe to our Google Group Page for future announcements. Where can I submit an issue/bug/feature request? We do our best to address issues/bugs/feature requests as they arise. If you do not see one similar to yours in the existing backlog, feel free to make a submission at either our (respective iOS, Android, or RN) GitHub repo or our Google Group Page .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#where-do-i-get-started","text":"First be sure to obtain a merchant ID here For iOS start here For Android start here","title":"Where do I get started?"},{"location":"faq/#where-do-i-sign-up-for-a-paypal-developer-account","text":"You may sign up for a developer account here A developer account is required for use with any of PayPal's various SDK's, including the Native Checkout SDK.","title":"Where do I sign up for a PayPal developer account?"},{"location":"faq/#is-there-a-project-roadmap-i-can-follow","text":"You may subscribe to our Google Group Page for future announcements.","title":"Is there a Project Roadmap I can follow?"},{"location":"faq/#where-can-i-submit-an-issuebugfeature-request","text":"We do our best to address issues/bugs/feature requests as they arise. If you do not see one similar to yours in the existing backlog, feel free to make a submission at either our (respective iOS, Android, or RN) GitHub repo or our Google Group Page .","title":"Where can I submit an issue/bug/feature request?"},{"location":"license/","text":"The PayPal Native Checkout SDK (for iOS, Android, and React-Native) is released under the following license: Copyright \u00a9 2013 - 2017 PayPal Holdings, Inc. SDK LICENSE NOTICE TO USER: PayPal Holdings, Inc. is providing the Software and Documentation for use under the terms of this Agreement. Any use, reproduction, modification or distribution of the Software or Documentation, or any derivatives or portions hereof, constitutes your acceptance of this Agreement. As used in this Agreement, \"PayPal\" means PayPal Holdings, Inc., \"Software\" means the software code accompanying this agreement. \"Documentation\" means the documents, specifications and all other items accompanying this Agreement other than the Software. LICENSE GRANT Subject to the terms of this Agreement, PayPal hereby grants you a non-exclusive, worldwide, royalty-free license to use, reproduce, prepare derivative works from, publicly display, publicly perform, distribute and sublicense the Software for any purpose, provided the copyright notice below appears in a conspicuous location within the source code of the distributed Software and this license is distributed in the supporting documentation of the Software you distribute. Furthermore, you must comply with all third party licenses in order to use the third party software contained in the Software. Subject to the terms of this Agreement, PayPal hereby grants you a non-exclusive, worldwide, royalty-free license to use, reproduce, publicly display, publicly perform, distribute and sublicense the Documentation for any purpose. You may not modify the Documentation. No title to the intellectual property in the Software or Documentation is transferred to you under the terms of this Agreement. You do not acquire any rights to the Software or the Documentation except as expressly set forth in this Agreement. If you choose to distribute the Software in a commercial product, you do so with the understanding that you agree to defend, indemnify and hold harmless PayPal and its suppliers against any losses, damages and costs arising from the claims, lawsuits or other legal actions arising out of such distribution. You may distribute the Software in object code form under your own license, provided that your license agreement: (a) complies with the terms and conditions of this license agreement; (b) effectively disclaims all warranties and conditions, express or implied, on behalf of PayPal; (c) effectively excludes all liability for damages on behalf of PayPal; (d) states that any provisions that differ from this Agreement are offered by you alone and not PayPal; and (e) states that the Software is available from you or PayPal and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange. DISCLAIMER OF WARRANTY PAYPAL LICENSES THE SOFTWARE AND DOCUMENTATION TO YOU ONLY ON AN \"AS IS\" BASIS WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. PAYPAL MAKES NO WARRANTY THAT THE SOFTWARE OR DOCUMENTATION WILL BE ERROR-FREE. Each user of the Software or Documentation is solely responsible for determining the appropriateness of using and distributing the Software and Documentation and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs, or equipment, and unavailability or interruption of operations. Use of the Software and Documentation is made with the understanding that PayPal will not provide you with any technical or customer support or maintenance. Some states or jurisdictions do not allow the exclusion of implied warranties or limitations on how long an implied warranty may last, so the above limitations may not apply to you. To the extent permissible, any implied warranties are limited to ninety (90) days. LIMITATION OF LIABILITY PAYPAL AND ITS SUPPLIERS SHALL NOT BE LIABLE FOR LOSS OR DAMAGE ARISING OUT OF THIS AGREEMENT OR FROM THE USE OF THE SOFTWARE OR DOCUMENTATION. IN NO EVENT WILL PAYPAL OR ITS SUPPLIERS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR SPECIAL DAMAGES INCLUDING LOST PROFITS, LOST SAVINGS, COSTS, FEES, OR EXPENSES OF ANY KIND ARISING OUT OF ANY PROVISION OF THIS AGREEMENT OR THE USE OR THE INABILITY TO USE THE SOFTWARE OR DOCUMENTATION, HOWEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR TORT INCLUDING NEGLIGENCE OR OTHERWISE), EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. PAYPAL'S AGGREGATE LIABILITY AND THAT OF ITS SUPPLIERS UNDER OR IN CONNECTION WITH THIS AGREEMENT SHALL BE LIMITED TO THE AMOUNT PAID BY YOU FOR THE SOFTWARE AND DOCUMENTATION. TRADEMARK USAGE PayPal is a trademark of PayPal Holdings, Inc. in the United States and other countries. Such trademarks may not be used to endorse or promote any product unless expressly permitted under separate agreement with PayPal. TERM Your rights under this Agreement shall terminate if you fail to comply with any of the material terms or conditions of this Agreement and do not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all your rights under this Agreement terminate, you agree to cease use and distribution of the Software and Documentation as soon as reasonably practicable. GOVERNING LAW AND JURISDICTION This Agreement is governed by the statutes and laws of the State of California, without regard to the conflicts of law principles thereof. If any part of this Agreement is found void and unenforceable, it will not affect the validity of the balance of the Agreement, which shall remain valid and enforceable according to its terms. Any dispute arising out of or related to this Agreement shall be brought in the courts of Santa Clara County, California, USA.","title":"License"},{"location":"license/#the-paypal-native-checkout-sdk-for-ios-android-and-react-native-is-released-under-the-following-license","text":"Copyright \u00a9 2013 - 2017 PayPal Holdings, Inc.","title":"The PayPal Native Checkout SDK (for iOS, Android, and React-Native) is released under the following license:"},{"location":"license/#sdk-license","text":"NOTICE TO USER: PayPal Holdings, Inc. is providing the Software and Documentation for use under the terms of this Agreement. Any use, reproduction, modification or distribution of the Software or Documentation, or any derivatives or portions hereof, constitutes your acceptance of this Agreement. As used in this Agreement, \"PayPal\" means PayPal Holdings, Inc., \"Software\" means the software code accompanying this agreement. \"Documentation\" means the documents, specifications and all other items accompanying this Agreement other than the Software. LICENSE GRANT Subject to the terms of this Agreement, PayPal hereby grants you a non-exclusive, worldwide, royalty-free license to use, reproduce, prepare derivative works from, publicly display, publicly perform, distribute and sublicense the Software for any purpose, provided the copyright notice below appears in a conspicuous location within the source code of the distributed Software and this license is distributed in the supporting documentation of the Software you distribute. Furthermore, you must comply with all third party licenses in order to use the third party software contained in the Software. Subject to the terms of this Agreement, PayPal hereby grants you a non-exclusive, worldwide, royalty-free license to use, reproduce, publicly display, publicly perform, distribute and sublicense the Documentation for any purpose. You may not modify the Documentation. No title to the intellectual property in the Software or Documentation is transferred to you under the terms of this Agreement. You do not acquire any rights to the Software or the Documentation except as expressly set forth in this Agreement. If you choose to distribute the Software in a commercial product, you do so with the understanding that you agree to defend, indemnify and hold harmless PayPal and its suppliers against any losses, damages and costs arising from the claims, lawsuits or other legal actions arising out of such distribution. You may distribute the Software in object code form under your own license, provided that your license agreement: (a) complies with the terms and conditions of this license agreement; (b) effectively disclaims all warranties and conditions, express or implied, on behalf of PayPal; (c) effectively excludes all liability for damages on behalf of PayPal; (d) states that any provisions that differ from this Agreement are offered by you alone and not PayPal; and (e) states that the Software is available from you or PayPal and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange. DISCLAIMER OF WARRANTY PAYPAL LICENSES THE SOFTWARE AND DOCUMENTATION TO YOU ONLY ON AN \"AS IS\" BASIS WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. PAYPAL MAKES NO WARRANTY THAT THE SOFTWARE OR DOCUMENTATION WILL BE ERROR-FREE. Each user of the Software or Documentation is solely responsible for determining the appropriateness of using and distributing the Software and Documentation and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs, or equipment, and unavailability or interruption of operations. Use of the Software and Documentation is made with the understanding that PayPal will not provide you with any technical or customer support or maintenance. Some states or jurisdictions do not allow the exclusion of implied warranties or limitations on how long an implied warranty may last, so the above limitations may not apply to you. To the extent permissible, any implied warranties are limited to ninety (90) days. LIMITATION OF LIABILITY PAYPAL AND ITS SUPPLIERS SHALL NOT BE LIABLE FOR LOSS OR DAMAGE ARISING OUT OF THIS AGREEMENT OR FROM THE USE OF THE SOFTWARE OR DOCUMENTATION. IN NO EVENT WILL PAYPAL OR ITS SUPPLIERS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR SPECIAL DAMAGES INCLUDING LOST PROFITS, LOST SAVINGS, COSTS, FEES, OR EXPENSES OF ANY KIND ARISING OUT OF ANY PROVISION OF THIS AGREEMENT OR THE USE OR THE INABILITY TO USE THE SOFTWARE OR DOCUMENTATION, HOWEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR TORT INCLUDING NEGLIGENCE OR OTHERWISE), EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. PAYPAL'S AGGREGATE LIABILITY AND THAT OF ITS SUPPLIERS UNDER OR IN CONNECTION WITH THIS AGREEMENT SHALL BE LIMITED TO THE AMOUNT PAID BY YOU FOR THE SOFTWARE AND DOCUMENTATION. TRADEMARK USAGE PayPal is a trademark of PayPal Holdings, Inc. in the United States and other countries. Such trademarks may not be used to endorse or promote any product unless expressly permitted under separate agreement with PayPal. TERM Your rights under this Agreement shall terminate if you fail to comply with any of the material terms or conditions of this Agreement and do not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all your rights under this Agreement terminate, you agree to cease use and distribution of the Software and Documentation as soon as reasonably practicable. GOVERNING LAW AND JURISDICTION This Agreement is governed by the statutes and laws of the State of California, without regard to the conflicts of law principles thereof. If any part of this Agreement is found void and unenforceable, it will not affect the validity of the balance of the Agreement, which shall remain valid and enforceable according to its terms. Any dispute arising out of or related to this Agreement shall be brought in the courts of Santa Clara County, California, USA.","title":"SDK LICENSE"},{"location":"Android/","text":"Getting Started PayPal Native Checkout SDK The PayPal Native Checkout SDK for Android, provides a simplified way for you to provide a secure and safe payment solution for your apps. At the least API 19 is required to be supported by your app, to integrate into our SDK PayPal Client ID Before you start, you should have already obtained a PayPal Client ID from the PayPal Developer portal. If you haven't done that step yet, please stop here, and follow the directions in our Obtaining a PayPal Client ID docs. Next Steps Now let's integrate the experience!","title":"Getting Started"},{"location":"Android/#getting-started","text":"","title":"Getting Started"},{"location":"Android/#paypal-native-checkout-sdk","text":"The PayPal Native Checkout SDK for Android, provides a simplified way for you to provide a secure and safe payment solution for your apps. At the least API 19 is required to be supported by your app, to integrate into our SDK","title":"PayPal Native Checkout SDK"},{"location":"Android/#paypal-client-id","text":"Before you start, you should have already obtained a PayPal Client ID from the PayPal Developer portal. If you haven't done that step yet, please stop here, and follow the directions in our Obtaining a PayPal Client ID docs.","title":"PayPal Client ID"},{"location":"Android/#next-steps","text":"Now let's integrate the experience!","title":"Next Steps"},{"location":"Android/integrating-experience/","text":"We have tried to make integrating the PayPal Native Checkout experience into your app as seamless as possible. Prerequisites Following is a list of requirements that are needed in order for PayPal Checkout to function correctly. Requirement Secure Web Browser Native Experience Notes URI Scheme \u2714 \u2714 App Link \u2716 \u2714 Should be registered as a valid Return URL in the PayPal Developer Portal Merchant ID \u2714 \u2714 Learn more about App Links . Setting up for the SDK If not already done, the Android application need to specify that it accepts internet permissions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"checkout.paypal.com.myapplication\"> <uses-permission android:name=\"android.permission.INTERNET\"/> For Authentication PayPal uses an in-house implementation of OpenId. Please add this activity to the AndroidManifest.xml to ensure the switch back to the app will take place using the URI schemes registered in the PayPal Developer Portal as a Return URL. <activity android:name=\"com.paypal.openid.RedirectUriReceiverActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:host=\"paypalcheckout\" android:scheme=\"sampleapp\" /> </intent-filter> </activity> PayPal also supports, but does not recommend, the use of App Links to switch back to the app. The format for using app links is provided below. Similar to the URI schemes example, the App Links url listed below, should match the registered Return URL in the PayPal Developer Portal. <activity android:name=\"com.paypal.openid.RedirectUriReceiverActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"https\" android:host=\"example.com\" android:path=\"/buyingstuff\"/> </intent-filter> </activity> Learn more about App Links. Remember an App Link needs to be registered in the PayPal Developer Portal as a Return URL. Incase the native experience can not be loaded for a particular user, PayPal will ensure that conversion happens, by falling back to a Chrome Custom Tabs (or default browser). To ensure that the user makes it back to the app from the PayPal web experience, a custom scheme is employed. Please add the following an activity with a *custom scheme you chose for the app. The host should stay paypalxo . If you are using URI schemes for adding the OpenId activity above, the scheme can be the same as the one used for the OpenId activity. If you are using app links (not recommended) for adding the OpenId activity above, the scheme used here needs to be set using the PayPalCheckoutConfig.setURLScheme(\"customScheme\") , the value can be any unique string for your app. <activity android:name=\"com.paypal.pyplcheckout.activities.PYPLInitiateCheckout\" android:launchMode=\"singleTask\"> <intent-filter android:autoVerify=\"true\"> <data android:host=\"paypalxo\" android:scheme=\"sampleapp\" /> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> </intent-filter> </activity> The completed AndroidManifest.xml should resemble the following. <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"checkout.paypal.com.myapplication\"> <uses-permission android:name=\"android.permission.INTERNET\"/> <application android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:theme=\"@style/AppTheme\"> <activity android:name=\".MainActivity\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> <activity android:name=\"com.paypal.openid.RedirectUriReceiverActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:host=\"paypalcheckout\" android:scheme=\"sampleapp\" /> </intent-filter> </activity> <activity android:name=\"com.paypal.pyplcheckout.activities.PYPLInitiateCheckout\" android:launchMode=\"singleTask\"> <intent-filter android:autoVerify=\"true\"> <data android:host=\"paypalxo\" android:scheme=\"sampleapp\" /> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> </intent-filter> </activity> </application> </manifest> Distribution Select a distribution method you would like to use. We'll guide you through setting up the SDK based on this method. Maven/Gradle Integrate using Maven/Gradle","title":"Integrating the Checkout Experience"},{"location":"Android/integrating-experience/#prerequisites","text":"Following is a list of requirements that are needed in order for PayPal Checkout to function correctly. Requirement Secure Web Browser Native Experience Notes URI Scheme \u2714 \u2714 App Link \u2716 \u2714 Should be registered as a valid Return URL in the PayPal Developer Portal Merchant ID \u2714 \u2714 Learn more about App Links .","title":"Prerequisites"},{"location":"Android/integrating-experience/#setting-up-for-the-sdk","text":"If not already done, the Android application need to specify that it accepts internet permissions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"checkout.paypal.com.myapplication\"> <uses-permission android:name=\"android.permission.INTERNET\"/> For Authentication PayPal uses an in-house implementation of OpenId. Please add this activity to the AndroidManifest.xml to ensure the switch back to the app will take place using the URI schemes registered in the PayPal Developer Portal as a Return URL. <activity android:name=\"com.paypal.openid.RedirectUriReceiverActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:host=\"paypalcheckout\" android:scheme=\"sampleapp\" /> </intent-filter> </activity> PayPal also supports, but does not recommend, the use of App Links to switch back to the app. The format for using app links is provided below. Similar to the URI schemes example, the App Links url listed below, should match the registered Return URL in the PayPal Developer Portal. <activity android:name=\"com.paypal.openid.RedirectUriReceiverActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"https\" android:host=\"example.com\" android:path=\"/buyingstuff\"/> </intent-filter> </activity> Learn more about App Links. Remember an App Link needs to be registered in the PayPal Developer Portal as a Return URL. Incase the native experience can not be loaded for a particular user, PayPal will ensure that conversion happens, by falling back to a Chrome Custom Tabs (or default browser). To ensure that the user makes it back to the app from the PayPal web experience, a custom scheme is employed. Please add the following an activity with a *custom scheme you chose for the app. The host should stay paypalxo . If you are using URI schemes for adding the OpenId activity above, the scheme can be the same as the one used for the OpenId activity. If you are using app links (not recommended) for adding the OpenId activity above, the scheme used here needs to be set using the PayPalCheckoutConfig.setURLScheme(\"customScheme\") , the value can be any unique string for your app. <activity android:name=\"com.paypal.pyplcheckout.activities.PYPLInitiateCheckout\" android:launchMode=\"singleTask\"> <intent-filter android:autoVerify=\"true\"> <data android:host=\"paypalxo\" android:scheme=\"sampleapp\" /> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> </intent-filter> </activity> The completed AndroidManifest.xml should resemble the following. <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"checkout.paypal.com.myapplication\"> <uses-permission android:name=\"android.permission.INTERNET\"/> <application android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:theme=\"@style/AppTheme\"> <activity android:name=\".MainActivity\"> <intent-filter> <action android:name=\"android.intent.action.MAIN\" /> <category android:name=\"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> <activity android:name=\"com.paypal.openid.RedirectUriReceiverActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:host=\"paypalcheckout\" android:scheme=\"sampleapp\" /> </intent-filter> </activity> <activity android:name=\"com.paypal.pyplcheckout.activities.PYPLInitiateCheckout\" android:launchMode=\"singleTask\"> <intent-filter android:autoVerify=\"true\"> <data android:host=\"paypalxo\" android:scheme=\"sampleapp\" /> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> </intent-filter> </activity> </application> </manifest>","title":"Setting up for the SDK"},{"location":"Android/integrating-experience/#distribution","text":"Select a distribution method you would like to use. We'll guide you through setting up the SDK based on this method.","title":"Distribution"},{"location":"Android/integrating-experience/#mavengradle","text":"Integrate using Maven/Gradle","title":"Maven/Gradle"},{"location":"Android/integrating-maven/","text":"Obtaining the SDK release The Android SDK is currently available via Maven repository. Prepping your Android Project Add the repositories to top level project build.gradle . allprojects { repositories { google() jcenter() maven { url \"https://github.com/paypal/paypalcheckout-android/raw/nativeSDK\"} } } Add the dependencies to the app level build.gradle . dependencies { implementation 'com.paypal.pyplcheckout:nativexo:3.4.8' } Re-sync the Gradle project, and it's time to use the SDK! Start Invoking the Experience","title":"Integrating with Maven"},{"location":"Android/integrating-maven/#obtaining-the-sdk-release","text":"The Android SDK is currently available via Maven repository.","title":"Obtaining the SDK release"},{"location":"Android/integrating-maven/#prepping-your-android-project","text":"Add the repositories to top level project build.gradle . allprojects { repositories { google() jcenter() maven { url \"https://github.com/paypal/paypalcheckout-android/raw/nativeSDK\"} } } Add the dependencies to the app level build.gradle . dependencies { implementation 'com.paypal.pyplcheckout:nativexo:3.4.8' } Re-sync the Gradle project, and it's time to use the SDK! Start Invoking the Experience","title":"Prepping your Android Project"},{"location":"Android/invoking-sdk/","text":"Invoking the SDK PayPal can either watch the WebView in the application, and provide a native payment experience in place of a website or can be invoked directly by calling a simple function. You can integrate manually into the application using the super easy steps below. Setup the Environment The SDK needs some additional information about the application before it can be invoked. Take a look at the // Register the activity context. final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // Set the client ID of the app. paypalEnvironment.setClientId(\"AX93NErgg-sampleClientID_registeredForTheApplication-VD4GP-AJdjT0Uz4\"); // Set the URI scheme/app link registered in the PayPal Developer Portal as a Return URL and defined for `com.paypal.openid.RedirectUriReceiverActivity` activity in the AndroidManifest.xml file. paypalEnvironment.setPayPalRedirectURL(\"sampleapp://paypalpay\"); // This is optional if using URI schemes as a Return Url. // This is mandatory if app links are used as a Return Url. // If set, the value should match the scheme provided for the `com.paypal.pyplcheckout.activities.PYPLInitiateCheckout` activity in the AndroidManifest.xml file. paypalEnvironment.setPayPalUrlScheme(\"sampleapp\"); // The environment is set to LIVE by default. Use this only for internal testing. paypalEnvironment.setPayPalEnvironment(PayPalEnvironment.SANDBOX); Integration Steps for Web Intercept WebView Intercept If the preceeding integration has collisions with code around the WebView, manual intercepting of the WebView is possible, as shown in these examples. PayPalWebViewUtils.getInstance().shouldOverrideUrlLoading(view, url) method can be used to intercept the webView on any redirections to PayPal. This function returns a boolean that can be used on the shouldOverrideUrlLoading() method in the webViewClient. Example of WebView integration with your own webViewClient. // MainActivity.class WebView webView = new WebView(this); //SampleWebViewIntercept is your webViewClient. webView.setWebViewClient(new SampleWebViewIntercept()); // SampleWebViewIntercept.class public class SampleWebViewIntercept extends WebViewClient { // Include this for integrating with Checkout.js. @Override public void onPageFinished(WebView view, String url) { super.onPageFinished(view, url); // This will load a script to handle the Checkout.js integration. PayPalWebViewUtils.getInstance().loadScript(view); } @Override public boolean shouldOverrideUrlLoading(WebView view, final String url) { return PayPalWebViewUtils.getInstance().shouldOverrideUrlLoading(view, url); } } Direct Invocation Start the PayPal Checkout Experience directly, by providing a Payment Token from the back office system. Set a call back delegate, when the checkout has completed. paypalEnvironment.setPayPalService(new PayPalService() { @Override public void onApprove(HashMap<String,String> returnParams) { // Return params will contain all the required information for the merchant to finish the transaction. Log.i(\"CheckoutFinishedWith>>\", returnParams.toString()); // Here is a sample of what return params consists /** { returnUrl=https://sampleurl.com/checkouts/?from_cart=true&key=Key&token=EC-token&PayerID=payerID&opType=payment, token=EC-token, key=Key, PayerID=payerID } **/ } // In addition to the onApprove delegate you can also provide a onCancel delegate that is called when the user cancels the checkout process. @Override public void onCancel() { Log.i(\"Checkout Canceled>>\", \"Checkout Canceled\"); } }); Set additional params that you need to pass to PayPal. This is optional. // Every option should be a string with the key and value joined with a '=' String[] paypalParamsArray = new String[1]; paypalParamsArray[0] = \"useraction=commit\"; paypalEnvironment.setMerchantQueryParams(paypalParamsArray); Start the experience with the checkout token. PayPalCheckout.getInstance().startCheckout(\"sampleCheckoutToken\"); Dropping the delegate. In the event you need to drop the delegate from our callbacks, you can use final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); paypalEnvironment.clearCheckoutDelegate(); To recieve events again, simply set the delegate again. No Native UI Mode The secure browser method, implements a sandboxed in app browser (Chrome Custom Tab), and eases the integration required for a developer. This path also implements the PayPal Risk library. To disable the UI, simply set the webBrowserOnlyMode on the Environment object. Example of WebView Intercept with no webViewClient. final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // This will ensure that the native UI is not called paypalEnvironment.setWebOnlyMode(true); Example of WebView Intercept with your own webViewClient with. //MainActivity.class final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // Set environment for internal testing. // paypalEnvironment.setPayPalEnvironment(PayPalEnvironment.SANDBOX); paypalEnvironment.setPayPalRedirectURL(\"sampleapp://paypalpay\"); paypalEnvironment.setClientId(\"AX93NErgg-sampleClientID_registeredForTheApplication-VD4GP-AJdjT0Uz4\"); // Optional param to only show web experience. // paypalEnvironment.setWebOnlyMode(true); WebView webView = new WebView(this); // Provide webViewClient for your WebView. webView.setWebViewClient(new SampleWebViewIntercept()); // SampleWebViewIntercept.class public class SampleWebViewIntercept extends WebViewClient { // Include this for integrating with Checkout.js. @Override public void onPageFinished(WebView view, String url) { super.onPageFinished(view, url); // This will load a script to handle the Checkout.js integration. PayPalWebViewUtils.getInstance().loadScript(view); } @Override public boolean shouldOverrideUrlLoading(WebView view, final String url) { return PayPalWebViewUtils.getInstance().shouldOverrideUrlLoading(view, url); } } Example of Direct Invocation final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // Set environment for internal testing. // paypalEnvironment.setPayPalEnvironment(PayPalEnvironment.SANDBOX); paypalEnvironment.setPayPalRedirectURL(\"sampleapp://paypalpay\"); paypalEnvironment.setClientId(\"AX93NErgg-sampleClientID_registeredForTheApplication-VD4GP-AJdjT0Uz4\"); // Optional param to only show web experience. // paypalEnvironment.setWebOnlyMode(true); // Provide a Service with overrden methods to handle checkout operations. paypalEnvironment.setPayPalService(new PayPalService() { @Override public void onApprove(HashMap<String,String> returnParams) { // Return params will contain all the required information for the merchant to finish the transaction. Log.i(\"CheckoutFinishedWith>>\", returnParams.toString()); // Here is a sample of what return params consists /** { returnUrl=https://sampleurl.com/checkouts/?from_cart=true&key=Key&token=EC-token&PayerID=payerID&opType=payment, token=EC-token, key=Key, PayerID=payerID } **/ } // In addition to the onApprove delegate you can also provide a onCancel delegate that is called when the user cancels the checkout process. @Override public void onCancel() { Log.i(\"Checkout Canceled>>\", \"Checkout Canceled\"); } }); PayPalCheckout.getInstance().startCheckout(\"sampleCheckoutToken\");","title":"Invoking the SDK"},{"location":"Android/invoking-sdk/#invoking-the-sdk","text":"PayPal can either watch the WebView in the application, and provide a native payment experience in place of a website or can be invoked directly by calling a simple function. You can integrate manually into the application using the super easy steps below.","title":"Invoking the SDK"},{"location":"Android/invoking-sdk/#setup-the-environment","text":"The SDK needs some additional information about the application before it can be invoked. Take a look at the // Register the activity context. final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // Set the client ID of the app. paypalEnvironment.setClientId(\"AX93NErgg-sampleClientID_registeredForTheApplication-VD4GP-AJdjT0Uz4\"); // Set the URI scheme/app link registered in the PayPal Developer Portal as a Return URL and defined for `com.paypal.openid.RedirectUriReceiverActivity` activity in the AndroidManifest.xml file. paypalEnvironment.setPayPalRedirectURL(\"sampleapp://paypalpay\"); // This is optional if using URI schemes as a Return Url. // This is mandatory if app links are used as a Return Url. // If set, the value should match the scheme provided for the `com.paypal.pyplcheckout.activities.PYPLInitiateCheckout` activity in the AndroidManifest.xml file. paypalEnvironment.setPayPalUrlScheme(\"sampleapp\"); // The environment is set to LIVE by default. Use this only for internal testing. paypalEnvironment.setPayPalEnvironment(PayPalEnvironment.SANDBOX);","title":"Setup the Environment"},{"location":"Android/invoking-sdk/#integration-steps-for-web-intercept","text":"","title":"Integration Steps for Web Intercept"},{"location":"Android/invoking-sdk/#webview-intercept","text":"If the preceeding integration has collisions with code around the WebView, manual intercepting of the WebView is possible, as shown in these examples. PayPalWebViewUtils.getInstance().shouldOverrideUrlLoading(view, url) method can be used to intercept the webView on any redirections to PayPal. This function returns a boolean that can be used on the shouldOverrideUrlLoading() method in the webViewClient. Example of WebView integration with your own webViewClient. // MainActivity.class WebView webView = new WebView(this); //SampleWebViewIntercept is your webViewClient. webView.setWebViewClient(new SampleWebViewIntercept()); // SampleWebViewIntercept.class public class SampleWebViewIntercept extends WebViewClient { // Include this for integrating with Checkout.js. @Override public void onPageFinished(WebView view, String url) { super.onPageFinished(view, url); // This will load a script to handle the Checkout.js integration. PayPalWebViewUtils.getInstance().loadScript(view); } @Override public boolean shouldOverrideUrlLoading(WebView view, final String url) { return PayPalWebViewUtils.getInstance().shouldOverrideUrlLoading(view, url); } }","title":"WebView Intercept"},{"location":"Android/invoking-sdk/#direct-invocation","text":"Start the PayPal Checkout Experience directly, by providing a Payment Token from the back office system. Set a call back delegate, when the checkout has completed. paypalEnvironment.setPayPalService(new PayPalService() { @Override public void onApprove(HashMap<String,String> returnParams) { // Return params will contain all the required information for the merchant to finish the transaction. Log.i(\"CheckoutFinishedWith>>\", returnParams.toString()); // Here is a sample of what return params consists /** { returnUrl=https://sampleurl.com/checkouts/?from_cart=true&key=Key&token=EC-token&PayerID=payerID&opType=payment, token=EC-token, key=Key, PayerID=payerID } **/ } // In addition to the onApprove delegate you can also provide a onCancel delegate that is called when the user cancels the checkout process. @Override public void onCancel() { Log.i(\"Checkout Canceled>>\", \"Checkout Canceled\"); } }); Set additional params that you need to pass to PayPal. This is optional. // Every option should be a string with the key and value joined with a '=' String[] paypalParamsArray = new String[1]; paypalParamsArray[0] = \"useraction=commit\"; paypalEnvironment.setMerchantQueryParams(paypalParamsArray); Start the experience with the checkout token. PayPalCheckout.getInstance().startCheckout(\"sampleCheckoutToken\"); Dropping the delegate. In the event you need to drop the delegate from our callbacks, you can use final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); paypalEnvironment.clearCheckoutDelegate(); To recieve events again, simply set the delegate again.","title":"Direct Invocation"},{"location":"Android/invoking-sdk/#no-native-ui-mode","text":"The secure browser method, implements a sandboxed in app browser (Chrome Custom Tab), and eases the integration required for a developer. This path also implements the PayPal Risk library. To disable the UI, simply set the webBrowserOnlyMode on the Environment object. Example of WebView Intercept with no webViewClient. final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // This will ensure that the native UI is not called paypalEnvironment.setWebOnlyMode(true); Example of WebView Intercept with your own webViewClient with. //MainActivity.class final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // Set environment for internal testing. // paypalEnvironment.setPayPalEnvironment(PayPalEnvironment.SANDBOX); paypalEnvironment.setPayPalRedirectURL(\"sampleapp://paypalpay\"); paypalEnvironment.setClientId(\"AX93NErgg-sampleClientID_registeredForTheApplication-VD4GP-AJdjT0Uz4\"); // Optional param to only show web experience. // paypalEnvironment.setWebOnlyMode(true); WebView webView = new WebView(this); // Provide webViewClient for your WebView. webView.setWebViewClient(new SampleWebViewIntercept()); // SampleWebViewIntercept.class public class SampleWebViewIntercept extends WebViewClient { // Include this for integrating with Checkout.js. @Override public void onPageFinished(WebView view, String url) { super.onPageFinished(view, url); // This will load a script to handle the Checkout.js integration. PayPalWebViewUtils.getInstance().loadScript(view); } @Override public boolean shouldOverrideUrlLoading(WebView view, final String url) { return PayPalWebViewUtils.getInstance().shouldOverrideUrlLoading(view, url); } } Example of Direct Invocation final PayPalCheckoutConfig paypalEnvironment = PayPalCheckoutConfig.getInstance(this); // Set environment for internal testing. // paypalEnvironment.setPayPalEnvironment(PayPalEnvironment.SANDBOX); paypalEnvironment.setPayPalRedirectURL(\"sampleapp://paypalpay\"); paypalEnvironment.setClientId(\"AX93NErgg-sampleClientID_registeredForTheApplication-VD4GP-AJdjT0Uz4\"); // Optional param to only show web experience. // paypalEnvironment.setWebOnlyMode(true); // Provide a Service with overrden methods to handle checkout operations. paypalEnvironment.setPayPalService(new PayPalService() { @Override public void onApprove(HashMap<String,String> returnParams) { // Return params will contain all the required information for the merchant to finish the transaction. Log.i(\"CheckoutFinishedWith>>\", returnParams.toString()); // Here is a sample of what return params consists /** { returnUrl=https://sampleurl.com/checkouts/?from_cart=true&key=Key&token=EC-token&PayerID=payerID&opType=payment, token=EC-token, key=Key, PayerID=payerID } **/ } // In addition to the onApprove delegate you can also provide a onCancel delegate that is called when the user cancels the checkout process. @Override public void onCancel() { Log.i(\"Checkout Canceled>>\", \"Checkout Canceled\"); } }); PayPalCheckout.getInstance().startCheckout(\"sampleCheckoutToken\");","title":"No Native UI Mode"},{"location":"Android/misc/","text":"Additional Questions or just plain need help? If you have more questions than answered in this guide, please head over to our FAQ section. If you need more help, please reach out to our PayPal Native Checkout SDK team. You can do so by filing a support request on our Github Page , or raising a topic at our Google Group Page","title":"Miscellaneous"},{"location":"Android/misc/#additional-questions-or-just-plain-need-help","text":"If you have more questions than answered in this guide, please head over to our FAQ section. If you need more help, please reach out to our PayPal Native Checkout SDK team. You can do so by filing a support request on our Github Page , or raising a topic at our Google Group Page","title":"Additional Questions or just plain need help?"},{"location":"Setup/","text":"Initial Setup The Paypal-Merchant client id, helps you to enable this experience on your app and collect consent from Users that they would like to opt in and use this feature in your app when they pay with paypal. How to create a merchant app on our developer portal Go to https://developer.paypal.com/developer/applications/ Add a name and click on create app You will see the Merchant client_id generated in the next page. In App settings section, select In-app Checkout Add the universal link you created on your domain in the return url section. Finally mail our team for adding a special scope on your client ID to get the Native Checkout experience. You can mail us here","title":"Obtaining Merchant ID"},{"location":"Setup/#initial-setup","text":"The Paypal-Merchant client id, helps you to enable this experience on your app and collect consent from Users that they would like to opt in and use this feature in your app when they pay with paypal.","title":"Initial Setup"},{"location":"Setup/#how-to-create-a-merchant-app-on-our-developer-portal","text":"Go to https://developer.paypal.com/developer/applications/ Add a name and click on create app You will see the Merchant client_id generated in the next page. In App settings section, select In-app Checkout Add the universal link you created on your domain in the return url section. Finally mail our team for adding a special scope on your client ID to get the Native Checkout experience. You can mail us here","title":"How to create a merchant app on our developer portal"},{"location":"ios/","text":"Getting Started PayPal Native Checkout SDK The PayPal Native Checkout SDK for iOS, provides a simplified way for you to provide a secure and safe payment solution for your apps. Below is a list of capabilities in the SDK, and which versions of iOS support those features. iOS Version Webview Intercept Direct API Native Experience iOS 9 \u2714 \u2714 \u2716 iOS 10 \u2714 \u2714 \u2714 iOS 11 \u2714 \u2714 \u2714 PayPal Client ID Before you start, you should have already obtained a PayPal Client ID from the PayPal Developer portal. If you haven't done that step yet, please stop here, and follow the directions in our Obtaining a PayPal Client ID docs. Next Steps Now let's integrate the experience!","title":"Getting Started"},{"location":"ios/#getting-started","text":"","title":"Getting Started"},{"location":"ios/#paypal-native-checkout-sdk","text":"The PayPal Native Checkout SDK for iOS, provides a simplified way for you to provide a secure and safe payment solution for your apps. Below is a list of capabilities in the SDK, and which versions of iOS support those features. iOS Version Webview Intercept Direct API Native Experience iOS 9 \u2714 \u2714 \u2716 iOS 10 \u2714 \u2714 \u2714 iOS 11 \u2714 \u2714 \u2714","title":"PayPal Native Checkout SDK"},{"location":"ios/#paypal-client-id","text":"Before you start, you should have already obtained a PayPal Client ID from the PayPal Developer portal. If you haven't done that step yet, please stop here, and follow the directions in our Obtaining a PayPal Client ID docs.","title":"PayPal Client ID"},{"location":"ios/#next-steps","text":"Now let's integrate the experience!","title":"Next Steps"},{"location":"ios/getting-started-with-ios/","text":"Getting Started To integrate Native Checkout features, there are a few things you'll need to get started. PayPal Client ID with the Proper Scopes Apple Universal Links (used during PayPal authentication with your app) Uri Schemes (used to reliably return control to your app after checkout) Obtaining a PayPal Client ID","title":"Gettings Started with iOS"},{"location":"ios/getting-started-with-ios/#getting-started","text":"To integrate Native Checkout features, there are a few things you'll need to get started. PayPal Client ID with the Proper Scopes Apple Universal Links (used during PayPal authentication with your app) Uri Schemes (used to reliably return control to your app after checkout)","title":"Getting Started"},{"location":"ios/getting-started-with-ios/#obtaining-a-paypal-client-id","text":"","title":"Obtaining a PayPal Client ID"},{"location":"ios/integrating-cocoapods/","text":"Setting up your Podfile The PayPal iOS Checkout SDK is published to Cocoapod's Trunk. Add PayPal.Checkout pod requirement to your Podfile. target 'MyTestProject' do pod 'PayPal.Checkout' end Then execute pod install to complete the installation of the PayPal.Checkout pod. That's it! Open the cocoapod workspace, and complete the integration with the preferred experience. Start Invoking the Experience","title":"Integrating Cocoapods"},{"location":"ios/integrating-cocoapods/#setting-up-your-podfile","text":"The PayPal iOS Checkout SDK is published to Cocoapod's Trunk. Add PayPal.Checkout pod requirement to your Podfile. target 'MyTestProject' do pod 'PayPal.Checkout' end Then execute pod install to complete the installation of the PayPal.Checkout pod. That's it! Open the cocoapod workspace, and complete the integration with the preferred experience. Start Invoking the Experience","title":"Setting up your Podfile"},{"location":"ios/integrating-experience/","text":"We have tried to make integrating the PayPal Native Checkout experience into your app as seamless as possible. Prerequisites Following is a list of requirements that are needed in order for PayPal Checkout to function correctly. Requirement Secure Web Browser Native Experience Notes URI Scheme \u2714 \u2714 App Link \u2716 \u2714 Should be registered as a valid Return URL in the PayPal Developer Portal Merchant ID \u2714 \u2714 Learn more about App Links . Setting up SDK Parameters Add these values to the main info.plist of the application, PayPal Native Checkout SDK will use these values to facilitate the checkout process. You can copy and paste the XML value pairs from the box below. Change the items in the [] square brackets to represent the values you set prior to this step. <key>Paypal_Deep_Link</key> <string>[URISCHEME]://paypal/authorize</string> <key>Paypal_Client_Id</key> <string>[YOUR CLIENT ID]</string> <key>Paypal_Universal_Link</key> <string>https://mydomain.com/universal_link</string> Linker Flags We've shipped a version of OpenID library that our authentication scheme depends on. This library makes use of category headers. Due to this, you need to enable the -ObjC linker flag for your XCode project. Distribution Select a distribution method you would like to use. We'll guide you through setting up the SDK based on this method. Cocoapods Integrate using Cocoapods pod 'PayPal.Checkout'","title":"Integrating Experience"},{"location":"ios/integrating-experience/#we-have-tried-to-make-integrating-the-paypal-native-checkout-experience-into-your-app-as-seamless-as-possible","text":"","title":"We have tried to make integrating the PayPal Native Checkout experience into your app as seamless as possible."},{"location":"ios/integrating-experience/#prerequisites","text":"Following is a list of requirements that are needed in order for PayPal Checkout to function correctly. Requirement Secure Web Browser Native Experience Notes URI Scheme \u2714 \u2714 App Link \u2716 \u2714 Should be registered as a valid Return URL in the PayPal Developer Portal Merchant ID \u2714 \u2714 Learn more about App Links .","title":"Prerequisites"},{"location":"ios/integrating-experience/#setting-up-sdk-parameters","text":"Add these values to the main info.plist of the application, PayPal Native Checkout SDK will use these values to facilitate the checkout process. You can copy and paste the XML value pairs from the box below. Change the items in the [] square brackets to represent the values you set prior to this step. <key>Paypal_Deep_Link</key> <string>[URISCHEME]://paypal/authorize</string> <key>Paypal_Client_Id</key> <string>[YOUR CLIENT ID]</string> <key>Paypal_Universal_Link</key> <string>https://mydomain.com/universal_link</string>","title":"Setting up SDK Parameters"},{"location":"ios/integrating-experience/#linker-flags","text":"We've shipped a version of OpenID library that our authentication scheme depends on. This library makes use of category headers. Due to this, you need to enable the -ObjC linker flag for your XCode project.","title":"Linker Flags"},{"location":"ios/integrating-experience/#_1","text":"","title":""},{"location":"ios/integrating-experience/#distribution","text":"Select a distribution method you would like to use. We'll guide you through setting up the SDK based on this method.","title":"Distribution"},{"location":"ios/integrating-experience/#cocoapods","text":"Integrate using Cocoapods pod 'PayPal.Checkout'","title":"Cocoapods"},{"location":"ios/integrating-flat/","text":"Obtaining the flat archive Obtain the Flat Archive from Github (Click Here) https://github.com/paypal/paypalcheckout-ios/raw/master/flat%20archive/PayPal-NativeCheckout.zip Prepping your XCode Project While we iron out distribution, you can find the SDK shipped as 4 sets of binaries and assets. Device and Simulator binaries for Debug and Release. Use the appropriate set of libraries for the environment you plan to build against. The easiest way is to drag the following set of files into XCode. Code SyrNative.framework (ensure that frameworks are also listed under embedded binaries) NativeCheckout.framework libNativeCheckout.a libPPRiskComponent.a libAppAuth-iOS.a libAuthCore.a Assets These assets can be also be drug into XCode. These are the two asset files we are currently shipping, that need to be included. Images.xcassets can be renamed, but must appear in the main Application Bundle. PYPLCheckout.bundle should remain as named, and also much appear in the Main Application bundle. PYPLCheckout.bundle PYPLCheckout.xcassets Start Invoking the Experience","title":"Integrating Flat"},{"location":"ios/integrating-flat/#obtaining-the-flat-archive","text":"Obtain the Flat Archive from Github (Click Here) https://github.com/paypal/paypalcheckout-ios/raw/master/flat%20archive/PayPal-NativeCheckout.zip","title":"Obtaining the flat archive"},{"location":"ios/integrating-flat/#prepping-your-xcode-project","text":"While we iron out distribution, you can find the SDK shipped as 4 sets of binaries and assets. Device and Simulator binaries for Debug and Release. Use the appropriate set of libraries for the environment you plan to build against. The easiest way is to drag the following set of files into XCode. Code SyrNative.framework (ensure that frameworks are also listed under embedded binaries) NativeCheckout.framework libNativeCheckout.a libPPRiskComponent.a libAppAuth-iOS.a libAuthCore.a Assets These assets can be also be drug into XCode. These are the two asset files we are currently shipping, that need to be included. Images.xcassets can be renamed, but must appear in the main Application Bundle. PYPLCheckout.bundle should remain as named, and also much appear in the Main Application bundle. PYPLCheckout.bundle PYPLCheckout.xcassets Start Invoking the Experience","title":"Prepping your XCode Project"},{"location":"ios/invoking-sdk/","text":"Invoking the SDK PayPal will watch the WebView in your application, and provide a native payment experience in place of a website. You can integrate manually into your application using the super easy steps below. 1. Add Application Level URI and universal link handling Add PayPal Native Checkout SDK the application:openURL: signature of your AppDelegate.m file. This is common amongst other SDKs, you may need to add these to a chain. URI Scheme Handling // AppDelegate.m - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url { return [[PYPLCheckout sharedInstance] handleReturnFromPaypal: url]; } Universal Link Handling // AppDelegate.m - (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler { return [[PYPLCheckout sharedInstance] application:application continueUserActivity:userActivity restorationHandler:restorationHandler]; } Status Bar Resize // AppDelegate.m - (void)application:(UIApplication *)application didChangeStatusBarFrame:(CGRect)oldStatusBarFrame { [[PYPLCheckout sharedInstance] application:application didChangeStatusBarFrame:oldStatusBarFrame]; } This gives an opportunity for the PayPal Native Checkout SDK to handle, the deep links and Universal Link you are registered in the prior section while editing the Info.plist file. Integration Steps for Web Intercept Webview Intercept If the preceeding integration has collisions with code around the webview, manual intercepting of the webview is possible, as shown in these examples. Set Checkout's delegate as your class. This allows PayPal Checkout to return PayPalCheckoutCompleted method, after finishing checkout. PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; checkout.delegate = self; Depending on which WebView container you use, the sdk provides a signature that matches each. Each method returns a BOOL that will allow the application to determine if the Checkout library handled the URL. Example using a WKWebView as the browser container. - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler { PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; BOOL didPayPalHandleNavigation = [checkout webView:webView decidePolicyForNavigationAction:navigationAction decisionHandler:decisionHandler]; if(didPayPalHandleNavigation) { decisionHandler(WKNavigationActionPolicyCancel); } else { decisionHandler(WKNavigationActionPolicyAllow); } } Example using a UIWebView as the browser container. - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType { PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; return [checkout webView:webView shouldStartLoadWithRequest:request navigationType:navigationType]; } In both examples, the PayPalCheckoutCompleted method will execute, if there is no Checkout JS SDK integrated on the page. In the Checkout JS integration scenario, control will be returned to the CheckoutJS script. If there is no CheckoutJS script, the details dictionary object, will contain a returnUrl that can be used to navigate the WebView. Additionally the details object will be decorated with return parameters attached to the returnUrl . -(void) PayPalCheckoutCompleted: (NSDictionary*) details { NSLog(@\"Completed Checkout\"); } Direct Invocation Start the PayPal Checkout Experience directly, by providing a Payment Token from your back office. //ViewController.h #import <NativeCheckout/PYPLCheckout.h> //ViewController.m - (void)buttonDelgate: (id)sender { [[PYPLCheckout sharedInstance] startCheckoutWithECToken:@\"provide_payment_token\" withDelegate: self]; The checkout experience will report back to the delegate method. -(void) PayPalCheckoutCompleted: (NSDictionary*) details { } The details object will provide the typical returns from a PayPal checkout, note the keys have been forced to lowercase for consistency. NSDictionary* details = @{ @\"paymentid\": @\"\", @\"paymenttoken\": @\"\", @\"useraction\": @\"\", @\"payerid\":@\"\" } In an instance where a user was using a native interface (such as safari view controller), and did not go through the checkout flow, PayPalCheckoutCancelled will be called, to let you know to refresh the state of your app. -(void) PayPalCheckoutCancelled { } No Native UI Mode The secure browser method, implements a sandboxed in app browser (Safari View Controller, or Chrome Custom Tab), and eases the integration required for a developer. This path also implements the PayPal Risk library. To disable the UI, simply set the webBrowserOnlyMode on the Checkout object. Example of Webview Intercept PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; checkout.webBrowserOnlyMode = @YES; [checkout interceptWebView:webview]; Example of Direct Invocation PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; checkout.webBrowserOnlyMode = @YES; [checkout startCheckoutWithECToken:@\"provide_payment_token\" withDelegate:self];","title":"Invoking SDK"},{"location":"ios/invoking-sdk/#invoking-the-sdk","text":"PayPal will watch the WebView in your application, and provide a native payment experience in place of a website. You can integrate manually into your application using the super easy steps below.","title":"Invoking the SDK"},{"location":"ios/invoking-sdk/#1-add-application-level-uri-and-universal-link-handling","text":"Add PayPal Native Checkout SDK the application:openURL: signature of your AppDelegate.m file. This is common amongst other SDKs, you may need to add these to a chain.","title":"1. Add Application Level URI and universal link handling"},{"location":"ios/invoking-sdk/#uri-scheme-handling","text":"// AppDelegate.m - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url { return [[PYPLCheckout sharedInstance] handleReturnFromPaypal: url]; }","title":"URI Scheme Handling"},{"location":"ios/invoking-sdk/#universal-link-handling","text":"// AppDelegate.m - (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler { return [[PYPLCheckout sharedInstance] application:application continueUserActivity:userActivity restorationHandler:restorationHandler]; }","title":"Universal Link Handling"},{"location":"ios/invoking-sdk/#status-bar-resize","text":"// AppDelegate.m - (void)application:(UIApplication *)application didChangeStatusBarFrame:(CGRect)oldStatusBarFrame { [[PYPLCheckout sharedInstance] application:application didChangeStatusBarFrame:oldStatusBarFrame]; } This gives an opportunity for the PayPal Native Checkout SDK to handle, the deep links and Universal Link you are registered in the prior section while editing the Info.plist file.","title":"Status Bar Resize"},{"location":"ios/invoking-sdk/#integration-steps-for-web-intercept","text":"","title":"Integration Steps for Web Intercept"},{"location":"ios/invoking-sdk/#webview-intercept","text":"If the preceeding integration has collisions with code around the webview, manual intercepting of the webview is possible, as shown in these examples. Set Checkout's delegate as your class. This allows PayPal Checkout to return PayPalCheckoutCompleted method, after finishing checkout. PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; checkout.delegate = self; Depending on which WebView container you use, the sdk provides a signature that matches each. Each method returns a BOOL that will allow the application to determine if the Checkout library handled the URL. Example using a WKWebView as the browser container. - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler { PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; BOOL didPayPalHandleNavigation = [checkout webView:webView decidePolicyForNavigationAction:navigationAction decisionHandler:decisionHandler]; if(didPayPalHandleNavigation) { decisionHandler(WKNavigationActionPolicyCancel); } else { decisionHandler(WKNavigationActionPolicyAllow); } } Example using a UIWebView as the browser container. - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType { PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; return [checkout webView:webView shouldStartLoadWithRequest:request navigationType:navigationType]; } In both examples, the PayPalCheckoutCompleted method will execute, if there is no Checkout JS SDK integrated on the page. In the Checkout JS integration scenario, control will be returned to the CheckoutJS script. If there is no CheckoutJS script, the details dictionary object, will contain a returnUrl that can be used to navigate the WebView. Additionally the details object will be decorated with return parameters attached to the returnUrl . -(void) PayPalCheckoutCompleted: (NSDictionary*) details { NSLog(@\"Completed Checkout\"); }","title":"Webview Intercept"},{"location":"ios/invoking-sdk/#direct-invocation","text":"Start the PayPal Checkout Experience directly, by providing a Payment Token from your back office. //ViewController.h #import <NativeCheckout/PYPLCheckout.h> //ViewController.m - (void)buttonDelgate: (id)sender { [[PYPLCheckout sharedInstance] startCheckoutWithECToken:@\"provide_payment_token\" withDelegate: self]; The checkout experience will report back to the delegate method. -(void) PayPalCheckoutCompleted: (NSDictionary*) details { } The details object will provide the typical returns from a PayPal checkout, note the keys have been forced to lowercase for consistency. NSDictionary* details = @{ @\"paymentid\": @\"\", @\"paymenttoken\": @\"\", @\"useraction\": @\"\", @\"payerid\":@\"\" } In an instance where a user was using a native interface (such as safari view controller), and did not go through the checkout flow, PayPalCheckoutCancelled will be called, to let you know to refresh the state of your app. -(void) PayPalCheckoutCancelled { }","title":"Direct Invocation"},{"location":"ios/invoking-sdk/#no-native-ui-mode","text":"The secure browser method, implements a sandboxed in app browser (Safari View Controller, or Chrome Custom Tab), and eases the integration required for a developer. This path also implements the PayPal Risk library. To disable the UI, simply set the webBrowserOnlyMode on the Checkout object. Example of Webview Intercept PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; checkout.webBrowserOnlyMode = @YES; [checkout interceptWebView:webview]; Example of Direct Invocation PYPLCheckout* checkout = [PYPLCheckout sharedInstance]; checkout.webBrowserOnlyMode = @YES; [checkout startCheckoutWithECToken:@\"provide_payment_token\" withDelegate:self];","title":"No Native UI Mode"},{"location":"ios/misc/","text":"Additional Questions or just plain need help? If you have more questions than answered in this guide, please head over to our FAQ section. If you need more help, please reach out to our PayPal Native Checkout SDK team. You can do so by filing a support request on our Github Page , or raising a topic at our Google Group Page","title":"Misc"},{"location":"ios/misc/#additional-questions-or-just-plain-need-help","text":"If you have more questions than answered in this guide, please head over to our FAQ section. If you need more help, please reach out to our PayPal Native Checkout SDK team. You can do so by filing a support request on our Github Page , or raising a topic at our Google Group Page","title":"Additional Questions or just plain need help?"},{"location":"ios/sample/","text":"Additional Questions or just plain need help? If you have more questions than answered in this guide, please head over to our FAQ section. If you need more help, please reach out to our PayPal Native Checkout SDK team. You can do so by filing a support request on our Github Page , or raising a topic at our Google Group Page","title":"Sample"},{"location":"ios/sample/#additional-questions-or-just-plain-need-help","text":"If you have more questions than answered in this guide, please head over to our FAQ section. If you need more help, please reach out to our PayPal Native Checkout SDK team. You can do so by filing a support request on our Github Page , or raising a topic at our Google Group Page","title":"Additional Questions or just plain need help?"},{"location":"ios/selecting-an-integration-method/","text":"","title":"Selecting an Integration Method"}]}